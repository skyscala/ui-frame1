Ly8gS2FybWEgY29uZmlndXJhdGlvbiBmaWxlLCBzZWUgbGluayBmb3IgbW9yZSBpbmZvcm1hdGlvbgovLyBodHRwczovL2thcm1hLXJ1bm5lci5naXRodWIuaW8vMS4wL2NvbmZpZy9jb25maWd1cmF0aW9uLWZpbGUuaHRtbAoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY29uZmlnKSB7CiAgY29uZmlnLnNldCh7CiAgICBiYXNlUGF0aDogJycsCiAgICBmcmFtZXdvcmtzOiBbJ2phc21pbmUnLCAnQGFuZ3VsYXItZGV2a2l0L2J1aWxkLWFuZ3VsYXInXSwKICAgIHBsdWdpbnM6IFsKICAgICAgcmVxdWlyZSgna2FybWEtamFzbWluZScpLAogICAgICByZXF1aXJlKCdrYXJtYS1jaHJvbWUtbGF1bmNoZXInKSwKICAgICAgcmVxdWlyZSgna2FybWEtamFzbWluZS1odG1sLXJlcG9ydGVyJyksCiAgICAgIHJlcXVpcmUoJ2thcm1hLWNvdmVyYWdlJyksCiAgICAgIHJlcXVpcmUoJ0Bhbmd1bGFyLWRldmtpdC9idWlsZC1hbmd1bGFyL3BsdWdpbnMva2FybWEnKQogICAgXSwKICAgIGNsaWVudDogewogICAgICBqYXNtaW5lOiB7CiAgICAgICAgLy8geW91IGNhbiBhZGQgY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciBKYXNtaW5lIGhlcmUKICAgICAgICAvLyB0aGUgcG9zc2libGUgb3B0aW9ucyBhcmUgbGlzdGVkIGF0IGh0dHBzOi8vamFzbWluZS5naXRodWIuaW8vYXBpL2VkZ2UvQ29uZmlndXJhdGlvbi5odG1sCiAgICAgICAgLy8gZm9yIGV4YW1wbGUsIHlvdSBjYW4gZGlzYWJsZSB0aGUgcmFuZG9tIGV4ZWN1dGlvbiB3aXRoIGByYW5kb206IGZhbHNlYAogICAgICAgIC8vIG9yIHNldCBhIHNwZWNpZmljIHNlZWQgd2l0aCBgc2VlZDogNDMyMWAKICAgICAgfSwKICAgICAgY2xlYXJDb250ZXh0OiBmYWxzZSAvLyBsZWF2ZSBKYXNtaW5lIFNwZWMgUnVubmVyIG91dHB1dCB2aXNpYmxlIGluIGJyb3dzZXIKICAgIH0sCiAgICBqYXNtaW5lSHRtbFJlcG9ydGVyOiB7CiAgICAgIHN1cHByZXNzQWxsOiB0cnVlIC8vIHJlbW92ZXMgdGhlIGR1cGxpY2F0ZWQgdHJhY2VzCiAgICB9LAogICAgY292ZXJhZ2VSZXBvcnRlcjogewogICAgICBkaXI6IHJlcXVpcmUoJ3BhdGgnKS5qb2luKF9fZGlybmFtZSwgJy4vY292ZXJhZ2UvYWRtaW4tY29uc29sZS1wcmltZW5nJyksCiAgICAgIHN1YmRpcjogJy4nLAogICAgICByZXBvcnRlcnM6IFsKICAgICAgICB7IHR5cGU6ICdodG1sJyB9LAogICAgICAgIHsgdHlwZTogJ3RleHQtc3VtbWFyeScgfQogICAgICBdCiAgICB9LAogICAgcmVwb3J0ZXJzOiBbJ3Byb2dyZXNzJywgJ2tqaHRtbCddLAogICAgcG9ydDogOTg3NiwKICAgIGNvbG9yczogdHJ1ZSwKICAgIGxvZ0xldmVsOiBjb25maWcuTE9HX0lORk8sCiAgICBhdXRvV2F0Y2g6IHRydWUsCiAgICBicm93c2VyczogWydDaHJvbWUnXSwKICAgIHNpbmdsZVJ1bjogZmFsc2UsCiAgICByZXN0YXJ0T25GaWxlQ2hhbmdlOiB0cnVlCiAgfSk7Cn07Cg