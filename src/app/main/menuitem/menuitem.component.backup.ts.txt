aW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7CmltcG9ydCB7IE5hdmlnYXRpb25FbmQsIFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7CmltcG9ydCB7IGFuaW1hdGUsIHN0YXRlLCBzdHlsZSwgdHJhbnNpdGlvbiwgdHJpZ2dlciB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnOwppbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJzsKaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnOwppbXBvcnQgeyBMYXlvdXRTZXJ2aWNlIH0gZnJvbSAnLi4vbGF5b3V0LnNlcnZpY2UnOwppbXBvcnQgeyBNZW51U2VydmljZSB9IGZyb20gJy4uL21lbnUuc2VydmljZSc7CgpAQ29tcG9uZW50KHsKICBzZWxlY3RvcjogJ1thcHAtbWVudWl0ZW0tYmFja3VwXScsCiAgdGVtcGxhdGU6IGAKICAgIDxuZy1jb250YWluZXI-CiAgICAgICAgICAgICAgPGRpdiAqbmdJZj0icm9vdCAmJiBpdGVtLnZpc2libGUgIT09IGZhbHNlIiBjbGFzcz0ibGF5b3V0LW1lbnVpdGVtLXJvb3QtdGV4dCI-e3tpdGVtLmxhYmVsfX08L2Rpdj4KICAgICAgICA8YSAqbmdJZj0iKCFpdGVtLnJvdXRlckxpbmsgfHwgaXRlbS5pdGVtcykgJiYgaXRlbS52aXNpYmxlICE9PSBmYWxzZSIgW2F0dHIuaHJlZl09Iml0ZW0udXJsIiAoY2xpY2spPSJpdGVtQ2xpY2soJGV2ZW50KSIKICAgICAgICAgIFtuZ0NsYXNzXT0iaXRlbS5jbGFzcyIgW2F0dHIudGFyZ2V0XT0iaXRlbS50YXJnZXQiIHRhYmluZGV4PSIwIiBwUmlwcGxlPgogICAgICAgICAgPGkgW25nQ2xhc3NdPSJpdGVtLmljb24iIGNsYXNzPSJsYXlvdXQtbWVudWl0ZW0taWNvbiI-PC9pPgogICAgICAgICAgPHNwYW4gY2xhc3M9ImxheW91dC1tZW51aXRlbS10ZXh0Ij57e2l0ZW0ubGFiZWx9fTwvc3Bhbj4KICAgICAgICAgIDxpIGNsYXNzPSJwaSBwaS1mdyBwaS1hbmdsZS1kb3duIGxheW91dC1zdWJtZW51LXRvZ2dsZXIiICpuZ0lmPSJpdGVtLml0ZW1zIj48L2k-CiAgICAgICAgPC9hPgogICAgICAgIDxhICpuZ0lmPSIoaXRlbS5yb3V0ZXJMaW5rICYmICFpdGVtLml0ZW1zKSAmJiBpdGVtLnZpc2libGUgIT09IGZhbHNlIiAoY2xpY2spPSJpdGVtQ2xpY2soJGV2ZW50KSIgW25nQ2xhc3NdPSJpdGVtLmNsYXNzIiAKICAgICAgICAgIFtyb3V0ZXJMaW5rXT0iaXRlbS5yb3V0ZXJMaW5rIiByb3V0ZXJMaW5rQWN0aXZlPSJhY3RpdmUtcm91dGUiIFtyb3V0ZXJMaW5rQWN0aXZlT3B0aW9uc109Iml0ZW0ucm91dGVyTGlua09wdGlvbnN8fHtleGFjdDogdHJ1ZX0iCiAgICAgICAgICAgICAgICBbZnJhZ21lbnRdPSJpdGVtLmZyYWdtZW50IiBbcXVlcnlQYXJhbXNIYW5kbGluZ109Iml0ZW0ucXVlcnlQYXJhbXNIYW5kbGluZyIgW3ByZXNlcnZlRnJhZ21lbnRdPSJpdGVtLnByZXNlcnZlRnJhZ21lbnQiIAogICAgICAgICAgICAgICAgW3NraXBMb2NhdGlvbkNoYW5nZV09Iml0ZW0uc2tpcExvY2F0aW9uQ2hhbmdlIiBbcmVwbGFjZVVybF09Iml0ZW0ucmVwbGFjZVVybCIgW3N0YXRlXT0iaXRlbS5zdGF0ZSIgW3F1ZXJ5UGFyYW1zXT0iaXRlbS5xdWVyeVBhcmFtcyIKICAgICAgICAgICAgICAgIFthdHRyLnRhcmdldF09Iml0ZW0udGFyZ2V0IiB0YWJpbmRleD0iMCIgcFJpcHBsZT4KICAgICAgICAgIDxpIFtuZ0NsYXNzXT0iaXRlbS5pY29uIiBjbGFzcz0ibGF5b3V0LW1lbnVpdGVtLWljb24iPjwvaT4KICAgICAgICAgIDxzcGFuIGNsYXNzPSJsYXlvdXQtbWVudWl0ZW0tdGV4dCI-e3tpdGVtLmxhYmVsfX08L3NwYW4-CiAgICAgICAgICA8aSBjbGFzcz0icGkgcGktZncgcGktYW5nbGUtZG93biBsYXlvdXQtc3VibWVudS10b2dnbGVyIiAqbmdJZj0iaXRlbS5pdGVtcyI-PC9pPgogICAgICAgIDwvYT4KCiAgICAgICAgPHVsICpuZ0lmPSJpdGVtLml0ZW1zICYmIGl0ZW0udmlzaWJsZSAhPT0gZmFsc2UiIFtAY2hpbGRyZW5dPSJzdWJtZW51QW5pbWF0aW9uIj4KICAgICAgICAgIDxuZy10ZW1wbGF0ZSBuZ0ZvciBsZXQtY2hpbGQgbGV0LWk9ImluZGV4IiBbbmdGb3JPZl09Iml0ZW0uaXRlbXMiPgogICAgICAgICAgICA8bGkgYXBwLW1lbnVpdGVtIFtpdGVtXT0iY2hpbGQiIFtpbmRleF09ImkiIFtwYXJlbnRLZXldPSJrZXkiIFtjbGFzc109ImNoaWxkLmJhZGdlQ2xhc3MiPjwvbGk-CiAgICAgICAgICA8L25nLXRlbXBsYXRlPgogICAgICAgIDwvdWw-CiAgICAgIDwvbmctY29udGFpbmVyPgogIGAsCiAgaG9zdDogewogICAgJ1tjbGFzcy5sYXlvdXQtcm9vdC1tZW51aXRlbV0nOiAncm9vdCcsCiAgICAnW2NsYXNzLmFjdGl2ZS1tZW51aXRlbV0nOiAnYWN0aXZlJwogIH0sCiAgYW5pbWF0aW9uczogWwogICAgdHJpZ2dlcignY2hpbGRyZW4nLCBbCiAgICAgIHN0YXRlKCdjb2xsYXBzZWQnLCBzdHlsZSh7CiAgICAgICAgaGVpZ2h0OiAnMCcKICAgICAgfSkpLAogICAgICBzdGF0ZSgnZXhwYW5kZWQnLCBzdHlsZSh7CiAgICAgICAgaGVpZ2h0OiAnKicKICAgICAgfSkpLAogICAgICBzdGF0ZSgnaGlkZGVuJywgc3R5bGUoewogICAgICAgIGRpc3BsYXk6ICdub25lJwogICAgICB9KSksCiAgICAgIHN0YXRlKCd2aXNpYmxlJywgc3R5bGUoewogICAgICAgIGRpc3BsYXk6ICdibG9jaycKICAgICAgfSkpLAogICAgICB0cmFuc2l0aW9uKCdjb2xsYXBzZWQgPD0-IGV4cGFuZGVkJywgYW5pbWF0ZSgnNDAwbXMgY3ViaWMtYmV6aWVyKDAuODYsIDAsIDAuMDcsIDEpJykpCiAgICBdKQogIF0KfSkKZXhwb3J0IGNsYXNzIE1lbnVpdGVtQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kgewoKICBASW5wdXQoKSBpdGVtOiBhbnk7CgogIEBJbnB1dCgpIGluZGV4ITogbnVtYmVyOwoKICBASW5wdXQoKSByb290ITogYm9vbGVhbjsKCiAgQElucHV0KCkgcGFyZW50S2V5ITogc3RyaW5nOwoKICBhY3RpdmUgPSBmYWxzZTsKCiAgbWVudVNvdXJjZVN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uOwoKICBtZW51UmVzZXRTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjsKCiAga2V5OiBzdHJpbmcgPSAiIjsKCiAgY29uc3RydWN0b3IocHVibGljIGxheW91dFNlcnZpY2U6IExheW91dFNlcnZpY2UsIHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmLCBwdWJsaWMgcm91dGVyOiBSb3V0ZXIsIHByaXZhdGUgbWVudVNlcnZpY2U6IE1lbnVTZXJ2aWNlKSB7CiAgICB0aGlzLm1lbnVTb3VyY2VTdWJzY3JpcHRpb24gPSB0aGlzLm1lbnVTZXJ2aWNlLm1lbnVTb3VyY2UkLnN1YnNjcmliZSh2YWx1ZSA9PiB7CiAgICAgIFByb21pc2UucmVzb2x2ZShudWxsKS50aGVuKCgpID0-IHsKICAgICAgICBpZiAodmFsdWUucm91dGVFdmVudCkgewogICAgICAgICAgdGhpcy5hY3RpdmUgPSAodmFsdWUua2V5ID09PSB0aGlzLmtleSB8fCB2YWx1ZS5rZXkuc3RhcnRzV2l0aCh0aGlzLmtleSArICctJykpID8gdHJ1ZSA6IGZhbHNlOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgIGlmICh2YWx1ZS5rZXkgIT09IHRoaXMua2V5ICYmICF2YWx1ZS5rZXkuc3RhcnRzV2l0aCh0aGlzLmtleSArICctJykpIHsKICAgICAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pOwogICAgfSk7CgogICAgdGhpcy5tZW51UmVzZXRTdWJzY3JpcHRpb24gPSB0aGlzLm1lbnVTZXJ2aWNlLnJlc2V0U291cmNlJC5zdWJzY3JpYmUoKCkgPT4gewogICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlOwogICAgfSk7CgogICAgdGhpcy5yb3V0ZXIuZXZlbnRzLnBpcGUoZmlsdGVyKGV2ZW50ID0-IGV2ZW50IGluc3RhbmNlb2YgTmF2aWdhdGlvbkVuZCkpCiAgICAgIC5zdWJzY3JpYmUocGFyYW1zID0-IHsKICAgICAgICBpZiAodGhpcy5pdGVtLnJvdXRlckxpbmspIHsKICAgICAgICAgIHRoaXMudXBkYXRlQWN0aXZlU3RhdGVGcm9tUm91dGUoKTsKICAgICAgICB9CiAgICAgIH0pOwogIH0KCiAgbmdPbkluaXQoKSB7CiAgICB0aGlzLmtleSA9IHRoaXMucGFyZW50S2V5ID8gdGhpcy5wYXJlbnRLZXkgKyAnLScgKyB0aGlzLmluZGV4IDogU3RyaW5nKHRoaXMuaW5kZXgpOwoKICAgIGlmICh0aGlzLml0ZW0ucm91dGVyTGluaykgewogICAgICB0aGlzLnVwZGF0ZUFjdGl2ZVN0YXRlRnJvbVJvdXRlKCk7CiAgICB9CiAgfQoKICB1cGRhdGVBY3RpdmVTdGF0ZUZyb21Sb3V0ZSgpIHsKICAgIGxldCBhY3RpdmVSb3V0ZSA9IHRoaXMucm91dGVyLmlzQWN0aXZlKHRoaXMuaXRlbS5yb3V0ZXJMaW5rWzBdLCB7IHBhdGhzOiAnZXhhY3QnLCBxdWVyeVBhcmFtczogJ2lnbm9yZWQnLCBtYXRyaXhQYXJhbXM6ICdpZ25vcmVkJywgZnJhZ21lbnQ6ICdpZ25vcmVkJyB9KTsKCiAgICBpZiAoYWN0aXZlUm91dGUpIHsKICAgICAgdGhpcy5tZW51U2VydmljZS5vbk1lbnVTdGF0ZUNoYW5nZSh7IGtleTogdGhpcy5rZXksIHJvdXRlRXZlbnQ6IHRydWUgfSk7CiAgICB9CiAgfQoKICBpdGVtQ2xpY2soZXZlbnQ6IEV2ZW50KSB7CiAgICAvLyBhdm9pZCBwcm9jZXNzaW5nIGRpc2FibGVkIGl0ZW1zCiAgICBpZiAodGhpcy5pdGVtLmRpc2FibGVkKSB7CiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICAvLyBleGVjdXRlIGNvbW1hbmQKICAgIGlmICh0aGlzLml0ZW0uY29tbWFuZCkgewogICAgICB0aGlzLml0ZW0uY29tbWFuZCh7IG9yaWdpbmFsRXZlbnQ6IGV2ZW50LCBpdGVtOiB0aGlzLml0ZW0gfSk7CiAgICB9CgogICAgLy8gdG9nZ2xlIGFjdGl2ZSBzdGF0ZQogICAgaWYgKHRoaXMuaXRlbS5pdGVtcykgewogICAgICB0aGlzLmFjdGl2ZSA9ICF0aGlzLmFjdGl2ZTsKCiAgICAgIGlmICh0aGlzLnJvb3QgJiYgdGhpcy5hY3RpdmUpIHsKICAgICAgICB0aGlzLmxheW91dFNlcnZpY2Uub25PdmVybGF5U3VibWVudU9wZW4oKTsKICAgICAgfQogICAgfQogICAgZWxzZSB7CiAgICAgIGlmICh0aGlzLmxheW91dFNlcnZpY2UuaXNNb2JpbGUoKSkgewogICAgICAgIHRoaXMubGF5b3V0U2VydmljZS5zdGF0ZS5zdGF0aWNNZW51TW9iaWxlQWN0aXZlID0gZmFsc2U7CiAgICAgIH0KICAgIH0KCiAgICB0aGlzLm1lbnVTZXJ2aWNlLm9uTWVudVN0YXRlQ2hhbmdlKHsga2V5OiB0aGlzLmtleSB9KTsKICB9CgogIGdldCBzdWJtZW51QW5pbWF0aW9uKCkgewogICAgaWYgKHRoaXMubGF5b3V0U2VydmljZS5pc0Rlc2t0b3AoKSAmJiAodGhpcy5sYXlvdXRTZXJ2aWNlLmlzSG9yaXpvbnRhbCgpIHx8IHRoaXMubGF5b3V0U2VydmljZS5pc1NsaW0oKSkpCiAgICAgIHJldHVybiB0aGlzLmFjdGl2ZSA_ICd2aXNpYmxlJyA6ICdoaWRkZW4nOwogICAgZWxzZQogICAgICByZXR1cm4gdGhpcy5yb290ID8gJ2V4cGFuZGVkJyA6ICh0aGlzLmFjdGl2ZSA_ICdleHBhbmRlZCcgOiAnY29sbGFwc2VkJyk7CiAgfQoKICBuZ09uRGVzdHJveSgpIHsKICAgIGlmICh0aGlzLm1lbnVTb3VyY2VTdWJzY3JpcHRpb24pIHsKICAgICAgdGhpcy5tZW51U291cmNlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7CiAgICB9CgogICAgaWYgKHRoaXMubWVudVJlc2V0U3Vic2NyaXB0aW9uKSB7CiAgICAgIHRoaXMubWVudVJlc2V0U3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7CiAgICB9CiAgfQp9Cg