aW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJzsKaW1wb3J0IHsgUm91dGVzLCBSb3V0ZXJNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInOwppbXBvcnQgeyBMYW5kaW5nQ29tcG9uZW50IH0gZnJvbSAnLi9sYW5kaW5nL2xhbmRpbmcuY29tcG9uZW50JzsKaW1wb3J0IHsgRml4aW5nTm90aUNvbXBvbmVudCB9IGZyb20gJy4vZml4aW5nLW5vdGkvZml4aW5nLW5vdGkuY29tcG9uZW50JzsKaW1wb3J0IHsgRml4aW5nTm90aUV4Y2VwdGlvbnNDb21wb25lbnQgfSBmcm9tICcuL2ZpeGluZy1ub3RpLWV4Y2VwdGlvbnMvZml4aW5nLW5vdGktZXhjZXB0aW9ucy5jb21wb25lbnQnOwppbXBvcnQgeyBNYWluQ29tcG9uZW50IH0gZnJvbSAnLi9tYWluLmNvbXBvbmVudCc7CmNvbnN0IHJvdXRlczogUm91dGVzID0gWwogIHsKICAgIHBhdGg6ICcnLAogICAgY29tcG9uZW50OiBNYWluQ29tcG9uZW50LCAgICAgIAogICAgICAgIGNoaWxkcmVuOlsKICAgICAgICAgIHtwYXRoOidsYW5kaW5nLXBhZ2UnLCBjb21wb25lbnQ6TGFuZGluZ0NvbXBvbmVudH0sCiAgICAgICAgICB7cGF0aDonZml4aW5nLW5vdGktcGFnZScsIGNvbXBvbmVudDpGaXhpbmdOb3RpQ29tcG9uZW50fSwKICAgICAgICAgIHtwYXRoOidmaXhpbmctbm90aS1leHAnLCBjb21wb25lbnQ6Rml4aW5nTm90aUV4Y2VwdGlvbnNDb21wb25lbnR9CiAgICAgICAgXQogICAgICAKICB9Cl07CgpATmdNb2R1bGUoeyAgCiAgaW1wb3J0czogW1JvdXRlck1vZHVsZS5mb3JDaGlsZChyb3V0ZXMpXSwKICBleHBvcnRzOiBbUm91dGVyTW9kdWxlXQp9KQoKZXhwb3J0IGNsYXNzIE1haW5Sb3V0aW5nTW9kdWxlIHsgfQo